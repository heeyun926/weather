{"ast":null,"code":"import { useId as e } from \"@radix-ui/react-id\";\nimport * as o from \"@radix-ui/react-visually-hidden\";\nimport { Slottable as t } from \"@radix-ui/react-slot\";\nimport { Portal as r } from \"@radix-ui/react-portal\";\nimport * as n from \"@radix-ui/react-popper\";\nimport { createPopperScope as i } from \"@radix-ui/react-popper\";\nimport { Primitive as a } from \"@radix-ui/react-primitive\";\nimport { Presence as l } from \"@radix-ui/react-presence\";\nimport { useRect as c } from \"@radix-ui/react-use-rect\";\nimport { usePrevious as s } from \"@radix-ui/react-use-previous\";\nimport { useEscapeKeydown as u } from \"@radix-ui/react-use-escape-keydown\";\nimport { useControllableState as p } from \"@radix-ui/react-use-controllable-state\";\nimport { createContextScope as d } from \"@radix-ui/react-context\";\nimport { useComposedRefs as m } from \"@radix-ui/react-compose-refs\";\nimport { composeEventHandlers as f } from \"@radix-ui/primitive\";\nimport * as T from \"react\";\nimport C from \"@babel/runtime/helpers/esm/extends\";\nconst [w, x] = d(\"Tooltip\", [i]);\nexport { x as createTooltipScope };\nconst g = i(),\n  E = 700,\n  [v, b] = w(\"TooltipProvider\", {\n    isOpenDelayed: !0,\n    delayDuration: E,\n    onOpen: () => {},\n    onClose: () => {}\n  });\nexport const TooltipProvider = e => {\n  const {\n      __scopeTooltip: o,\n      delayDuration: t = E,\n      skipDelayDuration: r = 300,\n      children: n\n    } = e,\n    [i, a] = T.useState(!0),\n    l = T.useRef(0);\n  return T.useEffect(() => {\n    const e = l.current;\n    return () => window.clearTimeout(e);\n  }, []), /*#__PURE__*/T.createElement(v, {\n    scope: o,\n    isOpenDelayed: i,\n    delayDuration: t,\n    onOpen: T.useCallback(() => {\n      window.clearTimeout(l.current), a(!1);\n    }, []),\n    onClose: T.useCallback(() => {\n      window.clearTimeout(l.current), l.current = window.setTimeout(() => a(!0), r);\n    }, [r])\n  }, n);\n}; /*#__PURE__*/\nconst [y, _] = w(\"Tooltip\");\nexport const Tooltip = o => {\n  const {\n      __scopeTooltip: t,\n      children: r,\n      open: i,\n      defaultOpen: a = !1,\n      onOpenChange: l,\n      delayDuration: c\n    } = o,\n    s = b(\"Tooltip\", t),\n    u = g(t),\n    [d, m] = T.useState(null),\n    f = e(),\n    C = T.useRef(0),\n    w = null != c ? c : s.delayDuration,\n    x = T.useRef(!1),\n    {\n      onOpen: E,\n      onClose: v\n    } = s,\n    [_ = !1, h] = p({\n      prop: i,\n      defaultProp: a,\n      onChange: e => {\n        e && (document.dispatchEvent(new CustomEvent(\"tooltip.open\")), E()), null == l || l(e);\n      }\n    }),\n    k = T.useMemo(() => _ ? x.current ? \"delayed-open\" : \"instant-open\" : \"closed\", [_]),\n    D = T.useCallback(() => {\n      window.clearTimeout(C.current), x.current = !1, h(!0);\n    }, [h]),\n    O = T.useCallback(() => {\n      window.clearTimeout(C.current), C.current = window.setTimeout(() => {\n        x.current = !0, h(!0);\n      }, w);\n    }, [w, h]);\n  return T.useEffect(() => () => window.clearTimeout(C.current), []), /*#__PURE__*/T.createElement(n.Root, u, /*#__PURE__*/T.createElement(y, {\n    scope: t,\n    contentId: f,\n    open: _,\n    stateAttribute: k,\n    trigger: d,\n    onTriggerChange: m,\n    onTriggerEnter: T.useCallback(() => {\n      s.isOpenDelayed ? O() : D();\n    }, [s.isOpenDelayed, O, D]),\n    onOpen: T.useCallback(D, [D]),\n    onClose: T.useCallback(() => {\n      window.clearTimeout(C.current), h(!1), v();\n    }, [h, v])\n  }, r));\n}; /*#__PURE__*/\nexport const TooltipTrigger = /*#__PURE__*/T.forwardRef((e, o) => {\n  const {\n      __scopeTooltip: t,\n      ...r\n    } = e,\n    i = _(\"TooltipTrigger\", t),\n    l = g(t),\n    c = m(o, i.onTriggerChange),\n    s = T.useRef(!1),\n    u = T.useCallback(() => s.current = !1, []);\n  return T.useEffect(() => () => document.removeEventListener(\"mouseup\", u), [u]), /*#__PURE__*/T.createElement(n.Anchor, C({\n    asChild: !0\n  }, l), /*#__PURE__*/T.createElement(a.button, C({\n    \"aria-describedby\": i.open ? i.contentId : void 0,\n    \"data-state\": i.stateAttribute\n  }, r, {\n    ref: c,\n    onMouseEnter: f(e.onMouseEnter, i.onTriggerEnter),\n    onMouseLeave: f(e.onMouseLeave, i.onClose),\n    onMouseDown: f(e.onMouseDown, () => {\n      i.onClose(), s.current = !0, document.addEventListener(\"mouseup\", u, {\n        once: !0\n      });\n    }),\n    onFocus: f(e.onFocus, () => {\n      s.current || i.onOpen();\n    }),\n    onBlur: f(e.onBlur, i.onClose),\n    onClick: f(e.onClick, i.onClose)\n  })));\n}); /*#__PURE__*/\nexport const TooltipContent = /*#__PURE__*/T.forwardRef((e, o) => {\n  const {\n      forceMount: t,\n      ...r\n    } = e,\n    n = _(\"TooltipContent\", e.__scopeTooltip); /*#__PURE__*/\n  return T.createElement(l, {\n    present: t || n.open\n  }, /*#__PURE__*/T.createElement(h, C({\n    ref: o\n  }, r)));\n});\nconst h = /*#__PURE__*/T.forwardRef((e, i) => {\n  const {\n      __scopeTooltip: a,\n      children: l,\n      \"aria-label\": c,\n      portalled: s = !0,\n      ...p\n    } = e,\n    d = _(\"TooltipContent\", a),\n    m = g(a),\n    f = s ? r : T.Fragment,\n    {\n      onClose: w\n    } = d;\n  return u(() => w()), T.useEffect(() => (document.addEventListener(\"tooltip.open\", w), () => document.removeEventListener(\"tooltip.open\", w)), [w]), /*#__PURE__*/T.createElement(f, null, /*#__PURE__*/T.createElement(k, {\n    __scopeTooltip: a\n  }), /*#__PURE__*/T.createElement(n.Content, C({\n    \"data-state\": d.stateAttribute\n  }, m, p, {\n    ref: i,\n    style: {\n      ...p.style,\n      \"--radix-tooltip-content-transform-origin\": \"var(--radix-popper-transform-origin)\"\n    }\n  }), /*#__PURE__*/T.createElement(t, null, l), /*#__PURE__*/T.createElement(o.Root, {\n    id: d.contentId,\n    role: \"tooltip\"\n  }, c || l)));\n}); /*#__PURE__*/\nexport const TooltipArrow = /*#__PURE__*/T.forwardRef((e, o) => {\n  const {\n      __scopeTooltip: t,\n      ...r\n    } = e,\n    i = g(t); /*#__PURE__*/\n  return T.createElement(n.Arrow, C({}, i, r, {\n    ref: o\n  }));\n}); /*#__PURE__*/\nfunction k(e) {\n  const {\n      __scopeTooltip: o\n    } = e,\n    t = _(\"CheckTriggerMoved\", o),\n    r = c(t.trigger),\n    n = null == r ? void 0 : r.left,\n    i = s(n),\n    a = null == r ? void 0 : r.top,\n    l = s(a),\n    u = t.onClose;\n  return T.useEffect(() => {\n    (void 0 !== i && i !== n || void 0 !== l && l !== a) && u();\n  }, [u, i, l, n, a]), null;\n}\nexport const Provider = TooltipProvider;\nexport const Root = Tooltip;\nexport const Trigger = TooltipTrigger;\nexport const Content = TooltipContent;\nexport const Arrow = TooltipArrow;","map":{"version":3,"mappings":"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","names":["createTooltipContext","createTooltipScope","createContextScope","createPopperScope","usePopperScope","DEFAULT_DELAY_DURATION","TooltipProviderContextProvider","useTooltipProviderContext","isOpenDelayed","delayDuration","onOpen","onClose","TooltipProvider","props","__scopeTooltip","skipDelayDuration","children","setIsOpenDelayed","React","useState","skipDelayTimerRef","useRef","useEffect","skipDelayTimer","current","window","clearTimeout","_react","$badf5d6f88b7e9fa4e0bb85d71c0396a$var$TooltipProviderContextProvider","scope","useCallback","setTimeout","TooltipContextProvider","useTooltipContext","Tooltip","open","openProp","defaultOpen","onOpenChange","delayDurationProp","context","popperScope","trigger","setTrigger","contentId","useId","openTimerRef","wasOpenDelayedRef","setOpen","useControllableState","prop","defaultProp","onChange","document","dispatchEvent","CustomEvent","stateAttribute","useMemo","handleOpen","handleDelayedOpen","_radixUiReactPopper","Root","$badf5d6f88b7e9fa4e0bb85d71c0396a$var$TooltipContextProvider","onTriggerChange","onTriggerEnter","TooltipTrigger","forwardRef","forwardedRef","triggerProps","composedTriggerRef","useComposedRefs","isMouseDownRef","handleMouseUp","removeEventListener","Anchor","_babelRuntimeHelpersEsmExtends","asChild","Primitive","button","undefined","ref","onMouseEnter","composeEventHandlers","onMouseLeave","onMouseDown","addEventListener","once","onFocus","onBlur","onClick","TooltipContent","forceMount","contentProps","Presence","present","$badf5d6f88b7e9fa4e0bb85d71c0396a$var$TooltipContentImpl","TooltipContentImpl","ariaLabel","portalled","PortalWrapper","Portal","Fragment","useEscapeKeydown","$badf5d6f88b7e9fa4e0bb85d71c0396a$var$CheckTriggerMoved","Content","style","Slottable","_radixUiReactVisuallyHidden","id","role","TooltipArrow","arrowProps","Arrow","CheckTriggerMoved","triggerRect","useRect","triggerLeft","left","previousTriggerLeft","usePrevious","triggerTop","top","previousTriggerTop","handleClose","Provider","Trigger"],"sources":["/Users/guheeyun/Desktop/weather/node_modules/leva/node_modules/@radix-ui/react-tooltip/dist/packages/react/tooltip/src/Tooltip.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useEscapeKeydown } from '@radix-ui/react-use-escape-keydown';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useRect } from '@radix-ui/react-use-rect';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal } from '@radix-ui/react-portal';\nimport { Slottable } from '@radix-ui/react-slot';\nimport * as VisuallyHiddenPrimitive from '@radix-ui/react-visually-hidden';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\ntype ScopedProps<P = {}> = P & { __scopeTooltip?: Scope };\nconst [createTooltipContext, createTooltipScope] = createContextScope('Tooltip', [\n  createPopperScope,\n]);\nconst usePopperScope = createPopperScope();\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipProvider\n * -----------------------------------------------------------------------------------------------*/\n\nconst PROVIDER_NAME = 'TooltipProvider';\nconst DEFAULT_DELAY_DURATION = 700;\nconst TOOLTIP_OPEN = 'tooltip.open';\n\ntype TooltipProviderContextValue = {\n  isOpenDelayed: boolean;\n  delayDuration: number;\n  onOpen(): void;\n  onClose(): void;\n};\n\nconst [TooltipProviderContextProvider, useTooltipProviderContext] =\n  createTooltipContext<TooltipProviderContextValue>(PROVIDER_NAME, {\n    isOpenDelayed: true,\n    delayDuration: DEFAULT_DELAY_DURATION,\n    onOpen: () => {},\n    onClose: () => {},\n  });\n\ninterface TooltipProviderProps {\n  /**\n   * The duration from when the mouse enters the trigger until the tooltip gets opened.\n   * @defaultValue 700\n   */\n  delayDuration?: number;\n  /**\n   * How much time a user has to enter another trigger without incurring a delay again.\n   * @defaultValue 300\n   */\n  skipDelayDuration?: number;\n  children: React.ReactNode;\n}\n\nconst TooltipProvider: React.FC<TooltipProviderProps> = (\n  props: ScopedProps<TooltipProviderProps>\n) => {\n  const {\n    __scopeTooltip,\n    delayDuration = DEFAULT_DELAY_DURATION,\n    skipDelayDuration = 300,\n    children,\n  } = props;\n  const [isOpenDelayed, setIsOpenDelayed] = React.useState(true);\n  const skipDelayTimerRef = React.useRef(0);\n\n  React.useEffect(() => {\n    const skipDelayTimer = skipDelayTimerRef.current;\n    return () => window.clearTimeout(skipDelayTimer);\n  }, []);\n\n  return (\n    <TooltipProviderContextProvider\n      scope={__scopeTooltip}\n      isOpenDelayed={isOpenDelayed}\n      delayDuration={delayDuration}\n      onOpen={React.useCallback(() => {\n        window.clearTimeout(skipDelayTimerRef.current);\n        setIsOpenDelayed(false);\n      }, [])}\n      onClose={React.useCallback(() => {\n        window.clearTimeout(skipDelayTimerRef.current);\n        skipDelayTimerRef.current = window.setTimeout(\n          () => setIsOpenDelayed(true),\n          skipDelayDuration\n        );\n      }, [skipDelayDuration])}\n    >\n      {children}\n    </TooltipProviderContextProvider>\n  );\n};\n\nTooltipProvider.displayName = PROVIDER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * Tooltip\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOOLTIP_NAME = 'Tooltip';\n\ntype TooltipContextValue = {\n  contentId: string;\n  open: boolean;\n  stateAttribute: 'closed' | 'delayed-open' | 'instant-open';\n  trigger: TooltipTriggerElement | null;\n  onTriggerChange(trigger: TooltipTriggerElement | null): void;\n  onTriggerEnter(): void;\n  onOpen(): void;\n  onClose(): void;\n};\n\nconst [TooltipContextProvider, useTooltipContext] =\n  createTooltipContext<TooltipContextValue>(TOOLTIP_NAME);\n\ninterface TooltipProps {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n\n  /**\n   * The duration from when the mouse enters the trigger until the tooltip gets opened. This will\n   * override the prop with the same name passed to Provider.\n   * @defaultValue 700\n   */\n  delayDuration?: number;\n  children?: React.ReactNode;\n}\n\nconst Tooltip: React.FC<TooltipProps> = (props: ScopedProps<TooltipProps>) => {\n  const {\n    __scopeTooltip,\n    children,\n    open: openProp,\n    defaultOpen = false,\n    onOpenChange,\n    delayDuration: delayDurationProp,\n  } = props;\n  const context = useTooltipProviderContext(TOOLTIP_NAME, __scopeTooltip);\n  const popperScope = usePopperScope(__scopeTooltip);\n  const [trigger, setTrigger] = React.useState<HTMLButtonElement | null>(null);\n  const contentId = useId();\n  const openTimerRef = React.useRef(0);\n  const delayDuration = delayDurationProp ?? context.delayDuration;\n  const wasOpenDelayedRef = React.useRef(false);\n  const { onOpen, onClose } = context;\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: (open) => {\n      if (open) {\n        // we dispatch here so `TooltipProvider` isn't required to\n        // ensure other tooltips are aware of this one opening.\n        document.dispatchEvent(new CustomEvent(TOOLTIP_OPEN));\n        onOpen();\n      }\n      onOpenChange?.(open);\n    },\n  });\n  const stateAttribute = React.useMemo(() => {\n    return open ? (wasOpenDelayedRef.current ? 'delayed-open' : 'instant-open') : 'closed';\n  }, [open]);\n\n  const handleOpen = React.useCallback(() => {\n    window.clearTimeout(openTimerRef.current);\n    wasOpenDelayedRef.current = false;\n    setOpen(true);\n  }, [setOpen]);\n\n  const handleDelayedOpen = React.useCallback(() => {\n    window.clearTimeout(openTimerRef.current);\n    openTimerRef.current = window.setTimeout(() => {\n      wasOpenDelayedRef.current = true;\n      setOpen(true);\n    }, delayDuration);\n  }, [delayDuration, setOpen]);\n\n  React.useEffect(() => {\n    return () => window.clearTimeout(openTimerRef.current);\n  }, []);\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <TooltipContextProvider\n        scope={__scopeTooltip}\n        contentId={contentId}\n        open={open}\n        stateAttribute={stateAttribute}\n        trigger={trigger}\n        onTriggerChange={setTrigger}\n        onTriggerEnter={React.useCallback(() => {\n          if (context.isOpenDelayed) handleDelayedOpen();\n          else handleOpen();\n        }, [context.isOpenDelayed, handleDelayedOpen, handleOpen])}\n        onOpen={React.useCallback(handleOpen, [handleOpen])}\n        onClose={React.useCallback(() => {\n          window.clearTimeout(openTimerRef.current);\n          setOpen(false);\n          onClose();\n        }, [setOpen, onClose])}\n      >\n        {children}\n      </TooltipContextProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nTooltip.displayName = TOOLTIP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'TooltipTrigger';\n\ntype TooltipTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface TooltipTriggerProps extends PrimitiveButtonProps {}\n\nconst TooltipTrigger = React.forwardRef<TooltipTriggerElement, TooltipTriggerProps>(\n  (props: ScopedProps<TooltipTriggerProps>, forwardedRef) => {\n    const { __scopeTooltip, ...triggerProps } = props;\n    const context = useTooltipContext(TRIGGER_NAME, __scopeTooltip);\n    const popperScope = usePopperScope(__scopeTooltip);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.onTriggerChange);\n    const isMouseDownRef = React.useRef(false);\n    const handleMouseUp = React.useCallback(() => (isMouseDownRef.current = false), []);\n\n    React.useEffect(() => {\n      return () => document.removeEventListener('mouseup', handleMouseUp);\n    }, [handleMouseUp]);\n\n    return (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        <Primitive.button\n          // We purposefully avoid adding `type=button` here because tooltip triggers are also\n          // commonly anchors and the anchor `type` attribute signifies MIME type.\n          aria-describedby={context.open ? context.contentId : undefined}\n          data-state={context.stateAttribute}\n          {...triggerProps}\n          ref={composedTriggerRef}\n          onMouseEnter={composeEventHandlers(props.onMouseEnter, context.onTriggerEnter)}\n          onMouseLeave={composeEventHandlers(props.onMouseLeave, context.onClose)}\n          onMouseDown={composeEventHandlers(props.onMouseDown, () => {\n            context.onClose();\n            isMouseDownRef.current = true;\n            document.addEventListener('mouseup', handleMouseUp, { once: true });\n          })}\n          onFocus={composeEventHandlers(props.onFocus, () => {\n            if (!isMouseDownRef.current) context.onOpen();\n          })}\n          onBlur={composeEventHandlers(props.onBlur, context.onClose)}\n          // Handle anything that the browser considers a click for the element type if\n          // not using pointer e.g. Space keyup and Enter keydown\n          onClick={composeEventHandlers(props.onClick, context.onClose)}\n        />\n      </PopperPrimitive.Anchor>\n    );\n  }\n);\n\nTooltipTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'TooltipContent';\n\ntype TooltipContentElement = TooltipContentImplElement;\ninterface TooltipContentProps extends TooltipContentImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst TooltipContent = React.forwardRef<TooltipContentElement, TooltipContentProps>(\n  (props: ScopedProps<TooltipContentProps>, forwardedRef) => {\n    const { forceMount, ...contentProps } = props;\n    const context = useTooltipContext(CONTENT_NAME, props.__scopeTooltip);\n    return (\n      <Presence present={forceMount || context.open}>\n        <TooltipContentImpl ref={forwardedRef} {...contentProps} />\n      </Presence>\n    );\n  }\n);\n\ntype TooltipContentImplElement = React.ElementRef<typeof PopperPrimitive.Content>;\ntype PopperContentProps = Radix.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface TooltipContentImplProps extends PopperContentProps {\n  /**\n   * A more descriptive label for accessibility purpose\n   */\n  'aria-label'?: string;\n\n  /**\n   * Whether the Tooltip should render in a Portal\n   * (default: `true`)\n   */\n  portalled?: boolean;\n}\n\nconst TooltipContentImpl = React.forwardRef<TooltipContentImplElement, TooltipContentImplProps>(\n  (props: ScopedProps<TooltipContentImplProps>, forwardedRef) => {\n    const {\n      __scopeTooltip,\n      children,\n      'aria-label': ariaLabel,\n      portalled = true,\n      ...contentProps\n    } = props;\n    const context = useTooltipContext(CONTENT_NAME, __scopeTooltip);\n    const popperScope = usePopperScope(__scopeTooltip);\n    const PortalWrapper = portalled ? Portal : React.Fragment;\n    const { onClose } = context;\n\n    useEscapeKeydown(() => onClose());\n\n    React.useEffect(() => {\n      // Close this tooltip if another one opens\n      document.addEventListener(TOOLTIP_OPEN, onClose);\n      return () => document.removeEventListener(TOOLTIP_OPEN, onClose);\n    }, [onClose]);\n\n    return (\n      <PortalWrapper>\n        <CheckTriggerMoved __scopeTooltip={__scopeTooltip} />\n        <PopperPrimitive.Content\n          data-state={context.stateAttribute}\n          {...popperScope}\n          {...contentProps}\n          ref={forwardedRef}\n          style={{\n            ...contentProps.style,\n            // re-namespace exposed content custom property\n            ['--radix-tooltip-content-transform-origin' as any]:\n              'var(--radix-popper-transform-origin)',\n          }}\n        >\n          <Slottable>{children}</Slottable>\n          <VisuallyHiddenPrimitive.Root id={context.contentId} role=\"tooltip\">\n            {ariaLabel || children}\n          </VisuallyHiddenPrimitive.Root>\n        </PopperPrimitive.Content>\n      </PortalWrapper>\n    );\n  }\n);\n\nTooltipContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'TooltipArrow';\n\ntype TooltipArrowElement = React.ElementRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = Radix.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface TooltipArrowProps extends PopperArrowProps {}\n\nconst TooltipArrow = React.forwardRef<TooltipArrowElement, TooltipArrowProps>(\n  (props: ScopedProps<TooltipArrowProps>, forwardedRef) => {\n    const { __scopeTooltip, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeTooltip);\n    return <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nTooltipArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction CheckTriggerMoved(props: ScopedProps<{}>) {\n  const { __scopeTooltip } = props;\n  const context = useTooltipContext('CheckTriggerMoved', __scopeTooltip);\n\n  const triggerRect = useRect(context.trigger);\n  const triggerLeft = triggerRect?.left;\n  const previousTriggerLeft = usePrevious(triggerLeft);\n  const triggerTop = triggerRect?.top;\n  const previousTriggerTop = usePrevious(triggerTop);\n  const handleClose = context.onClose;\n\n  React.useEffect(() => {\n    // checking if the user has scrolled…\n    const hasTriggerMoved =\n      (previousTriggerLeft !== undefined && previousTriggerLeft !== triggerLeft) ||\n      (previousTriggerTop !== undefined && previousTriggerTop !== triggerTop);\n\n    if (hasTriggerMoved) {\n      handleClose();\n    }\n  }, [handleClose, previousTriggerLeft, previousTriggerTop, triggerLeft, triggerTop]);\n\n  return null;\n}\n\nconst Provider = TooltipProvider;\nconst Root = Tooltip;\nconst Trigger = TooltipTrigger;\nconst Content = TooltipContent;\nconst Arrow = TooltipArrow;\n\nexport {\n  createTooltipScope,\n  //\n  TooltipProvider,\n  Tooltip,\n  TooltipTrigger,\n  TooltipContent,\n  TooltipArrow,\n  //\n  Provider,\n  Root,\n  Trigger,\n  Content,\n  Arrow,\n};\nexport type { TooltipProps, TooltipTriggerProps, TooltipContentProps, TooltipArrowProps };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}