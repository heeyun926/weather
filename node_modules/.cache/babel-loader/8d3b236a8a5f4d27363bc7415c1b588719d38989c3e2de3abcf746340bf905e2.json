{"ast":null,"code":"import { observeElementRect as t } from \"@radix-ui/rect\";\nimport * as r from \"react\";\nexport function useRect(e) {\n  const [o, c] = r.useState();\n  return r.useEffect(() => {\n    if (e) {\n      const r = t(e, c);\n      return () => {\n        c(void 0), r();\n      };\n    }\n  }, [e]), o;\n}","map":{"version":3,"mappings":";;OASA,SAASA,QAAQC;EACf,OAAOC,GAAMC,KAAWC,EAAMC;EAW9B,OAVAD,EAAME,UAAU;IACd,IAAIL,GAAY;MACd,MAAMM,IAAYC,EAAmBP,GAAYE;MACjD,OAAO;QACLA,OAAQM,IACRF;MAAAA;IAAAA;EAAAA,GAIH,CAACN,KACGC;AAAAA","names":["useRect","measurable","rect","setRect","React","useState","useEffect","unobserve","observeElementRect","undefined"],"sources":["/Users/guheeyun/Desktop/weather/node_modules/leva/node_modules/@radix-ui/react-tooltip/node_modules/@radix-ui/react-use-rect/dist/packages/react/use-rect/src/useRect.tsx"],"sourcesContent":["import * as React from 'react';\nimport { observeElementRect } from '@radix-ui/rect';\n\nimport type { Measurable } from '@radix-ui/rect';\n\n/**\n * Use this custom hook to get access to an element's rect (getBoundingClientRect)\n * and observe it along time.\n */\nfunction useRect(measurable: Measurable | null) {\n  const [rect, setRect] = React.useState<ClientRect>();\n  React.useEffect(() => {\n    if (measurable) {\n      const unobserve = observeElementRect(measurable, setRect);\n      return () => {\n        setRect(undefined);\n        unobserve();\n      };\n    }\n    return;\n  }, [measurable]);\n  return rect;\n}\n\nexport { useRect };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}