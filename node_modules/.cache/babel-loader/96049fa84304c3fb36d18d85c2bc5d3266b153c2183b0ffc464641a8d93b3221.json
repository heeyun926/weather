{"ast":null,"code":"import { useCallbackRef as e } from \"@radix-ui/react-use-callback-ref\";\nimport * as t from \"react\";\nexport function useControllableState(_ref) {\n  let {\n    prop: o,\n    defaultProp: r,\n    onChange: n = () => {}\n  } = _ref;\n  const [a, u] = function (_ref2) {\n      let {\n        defaultProp: o,\n        onChange: r\n      } = _ref2;\n      const n = t.useState(o),\n        [a] = n,\n        u = t.useRef(a),\n        c = e(r);\n      return t.useEffect(() => {\n        u.current !== a && (c(a), u.current = a);\n      }, [a, u, c]), n;\n    }({\n      defaultProp: r,\n      onChange: n\n    }),\n    c = void 0 !== o,\n    f = c ? o : a,\n    l = e(n);\n  return [f, t.useCallback(e => {\n    if (c) {\n      const t = e,\n        r = \"function\" == typeof e ? t(o) : e;\n      r !== o && l(r);\n    } else u(e);\n  }, [c, o, u, l])];\n}","map":{"version":3,"mappings":";;OAWA,SAASA,2BAGI;EAAA,IAHJA;IAAwBC,MAC/BA;IAD+BC,aAE/BA;IAF+BC,UAG/BA,IAAW;EAAA;EAEX,OAAOC,GAAkBC,KAqB3B,iBAEEF;MAAAA,IAFF;QAAiCD,aAC/BA;QAD+BC,UAE/BA;MAAAA;MAEA,MAAMG,IAAoBC,EAAMC,SAAwBN;QAAAA,CACjDO,KAASH;QACVI,IAAeH,EAAMI,OAAOF;QAC5BG,IAAeC,EAAeV;MASpC,OAPAI,EAAMO,UAAU;QACVJ,EAAaK,YAAYN,MAC3BG,EAAaH,IACbC,EAAaK,UAAUN;MAAAA,GAExB,CAACA,GAAOC,GAAcE,KAElBN;IAAAA,CArCyCU,CAAqB;MAAEd;MAAaC;IAAAA;IAC9Ec,SAAwBC,MAATjB;IACfQ,IAAQQ,IAAehB,IAAOG;IAC9BQ,IAAeC,EAAeV;EAepC,OAAO,CAACM,GAb8DF,EAAMY,YACzEC;IACC,IAAIH,GAAc;MAChB,MAAMI,IAASD;QACTX,IAA6B,qBAAdW,IAA2BC,EAAOpB,KAAQmB;MAC3DX,MAAUR,KAAMW,EAAaH;IAAAA,OAEjCJ,EAAoBe;EAAAA,GAGxB,CAACH,GAAchB,GAAMI,GAAqBO;AAAAA","names":["useControllableState","prop","defaultProp","onChange","uncontrolledProp","setUncontrolledProp","uncontrolledState","React","useState","value","prevValueRef","useRef","handleChange","useCallbackRef","useEffect","current","useUncontrolledState","isControlled","undefined","useCallback","nextValue","setter"],"sources":["/Users/guheeyun/Desktop/weather/node_modules/leva/node_modules/@radix-ui/react-tooltip/node_modules/@radix-ui/react-use-controllable-state/dist/packages/react/use-controllable-state/src/useControllableState.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\ntype UseControllableStateParams<T> = {\n  prop?: T | undefined;\n  defaultProp?: T | undefined;\n  onChange?: (state: T) => void;\n};\n\ntype SetStateFn<T> = (prevState?: T) => T;\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange = () => {},\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });\n  const isControlled = prop !== undefined;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> = React.useCallback(\n    (nextValue) => {\n      if (isControlled) {\n        const setter = nextValue as SetStateFn<T>;\n        const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n        if (value !== prop) handleChange(value as T);\n      } else {\n        setUncontrolledProp(nextValue);\n      }\n    },\n    [isControlled, prop, setUncontrolledProp, handleChange]\n  );\n\n  return [value, setValue] as const;\n}\n\nfunction useUncontrolledState<T>({\n  defaultProp,\n  onChange,\n}: Omit<UseControllableStateParams<T>, 'prop'>) {\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value as T);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n\n  return uncontrolledState;\n}\n\nexport { useControllableState };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}